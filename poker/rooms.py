"""
Room management system for Poker-over-SSH.

This module handles creating, managing, and expiring game rooms.
Each room has its own isolated game state and player management.

This is generated by GitHub Copilot
"""

import asyncio
import time
import random
from typing import Dict, Optional, List, Any
from dataclasses import dataclass
from poker.player import PlayerManager
from poker.chat import ChatManager


# Word lists for generating room codes
ADJECTIVES = [
    "alpha", "brave", "cosmic", "divine", "epic", "fierce", "golden", "heroic", "iron", "jade",
    "mystic", "noble", "ocean", "patrol", "quantum", "rapid", "stellar", "thunder", "ultra", "vital",
    "winter", "xenial", "yellow", "zealous", "arctic", "blazing", "crimson", "diamond", "emerald", "frozen"
]

NOUNS = [
    "phoenix", "dragon", "falcon", "tiger", "wolf", "eagle", "lion", "shark", "hawk", "bear",
    "storm", "blade", "shield", "arrow", "sword", "crown", "gem", "star", "moon", "sun",
    "joshua", "alex", "maya", "zara", "kai", "nova", "sage", "river", "ash", "ember"
]

CULTURES = [
    "greek", "roman", "norse", "celtic", "aztec", "maya", "viking", "samurai", "ninja", "spartan",
    "trojan", "titan", "olympus", "valhalla", "atlas", "zeus", "thor", "odin", "apollo", "artemis",
    "cyber", "neon", "pixel", "matrix", "quantum", "stellar", "cosmic", "void", "omega", "alpha"
]


@dataclass
class Room:
    """Represents a game room with its own state and expiration."""
    
    code: str
    name: str
    created_at: float
    expires_at: float
    creator: str
    pm: PlayerManager
    session_map: Dict[Any, Any]
    game_in_progress: bool
    is_private: bool = True  # Rooms are private by default
    
    def __post_init__(self):
        self._game_lock = asyncio.Lock()
        # Initialize chat manager for this room
        self.chat_manager = ChatManager()
    
    def is_expired(self) -> bool:
        """Check if the room has expired."""
        return time.time() > self.expires_at
    
    def extend_expiry(self, minutes: int = 30) -> None:
        """Extend the room's expiry time."""
        self.expires_at = time.time() + (minutes * 60)
    
    def time_remaining(self) -> int:
        """Get remaining time in minutes."""
        remaining = self.expires_at - time.time()
        return max(0, int(remaining / 60))
    
    def can_view_code(self, username: str) -> bool:
        """Check if user can view the room code."""
        if not self.is_private:
            return True
        return username == self.creator or any(
            session for session, player in self.session_map.items() 
            if hasattr(session, '_username') and session._username == username
        )


class RoomManager:
    """Manages all game rooms."""
    
    def __init__(self):
        self.rooms: Dict[str, Room] = {}
        self._cleanup_task: Optional[asyncio.Task] = None
        self._create_default_room()
        
    def _create_default_room(self):
        """Create the default room that never expires."""
        default_room = Room(
            code="default",
            name="Default Lobby",
            created_at=time.time(),
            expires_at=float('inf'),  # Never expires
            creator="system",
            pm=PlayerManager("default"),  # Pass room code to PlayerManager
            session_map={},
            game_in_progress=False,
            is_private=False  # Default room is public
        )
        self.rooms["default"] = default_room
    
    def generate_room_code(self) -> str:
        """Generate a unique room code like '5704-patrol-joshua-greek'."""
        while True:
            number = random.randint(1000, 9999)
            adjective = random.choice(ADJECTIVES)
            noun = random.choice(NOUNS)
            culture = random.choice(CULTURES)
            code = f"{number}-{adjective}-{noun}-{culture}"
            
            if code not in self.rooms:
                return code
    
    def create_room(self, creator: str, name: Optional[str] = None, is_private: bool = True) -> Room:
        """Create a new room."""
        code = self.generate_room_code()
        room_name = name or f"{creator}'s Room"
        
        room = Room(
            code=code,
            name=room_name,
            created_at=time.time(),
            expires_at=time.time() + (30 * 60),  # 30 minutes
            creator=creator,
            pm=PlayerManager(code),  # Pass room code to PlayerManager
            session_map={},
            game_in_progress=False,
            is_private=is_private
        )
        
        self.rooms[code] = room
        
        # Start cleanup task if not already running
        if self._cleanup_task is None or self._cleanup_task.done():
            self._cleanup_task = asyncio.create_task(self._cleanup_expired_rooms())
        
        return room
    
    def get_room(self, code: str) -> Optional[Room]:
        """Get a room by code, or None if not found or expired."""
        room = self.rooms.get(code)
        if room and room.is_expired() and code != "default":
            # Clean up expired room
            del self.rooms[code]
            return None
        return room
    
    def list_rooms(self) -> List[Room]:
        """List all active rooms (for internal use)."""
        active_rooms = []
        expired_codes = []
        
        for code, room in self.rooms.items():
            if room.is_expired() and code != "default":
                expired_codes.append(code)
            else:
                active_rooms.append(room)
        
        # Clean up expired rooms
        for code in expired_codes:
            del self.rooms[code]
        
        return active_rooms
    
    def get_room_code_for_user(self, room_code: str, username: str) -> Optional[str]:
        """Get room code if user has permission to see it."""
        room = self.get_room(room_code)
        if not room:
            return None
        
        if room.can_view_code(username):
            return room.code
        return None
    
    def list_rooms_for_user(self, username: str) -> List[Dict[str, Any]]:
        """List rooms with appropriate visibility for the user."""
        active_rooms = []
        expired_codes = []
        
        for code, room in self.rooms.items():
            if room.is_expired() and code != "default":
                expired_codes.append(code)
            else:
                room_info = {
                    'room': room,
                    'can_view_code': room.can_view_code(username),
                    'is_member': any(
                        session for session, player in room.session_map.items() 
                        if hasattr(session, '_username') and session._username == username
                    )
                }
                active_rooms.append(room_info)
        
        # Clean up expired rooms
        for code in expired_codes:
            del self.rooms[code]
        
        return active_rooms
    
    def delete_room(self, code: str, requester: str) -> bool:
        """Delete a room if the requester is the creator or admin."""
        if code == "default":
            return False  # Cannot delete default room
        
        room = self.rooms.get(code)
        if not room:
            return False
        
        if room.creator != requester:
            return False  # Only creator can delete
        
        # Notify all players in the room
        for session, player in list(room.session_map.items()):
            try:
                session._stdout.write(f"\r\nüè† Room '{room.name}' has been deleted by {room.creator}.\r\n")
                session._stdout.write(f"üîÑ You've been moved to the default room.\r\n‚ùØ ")
                # Try to drain, but don't fail if we can't
                try:
                    import asyncio
                    asyncio.create_task(session._stdout.drain())
                except Exception:
                    pass
            except Exception:
                pass
        
        del self.rooms[code]
        return True
    
    async def _cleanup_expired_rooms(self):
        """Background task to clean up expired rooms."""
        while True:
            try:
                expired_codes = []
                current_time = time.time()
                
                for code, room in self.rooms.items():
                    if code != "default" and room.is_expired():
                        expired_codes.append(code)
                        
                        # Notify players about expiration
                        for session, player in list(room.session_map.items()):
                            try:
                                session._stdout.write(f"\r\n‚è∞ Room '{room.name}' has expired.\r\n")
                                session._stdout.write(f"üîÑ You've been moved to the default room.\r\n‚ùØ ")
                                await session._stdout.drain()
                            except Exception:
                                pass
                
                # Clean up expired rooms
                for code in expired_codes:
                    del self.rooms[code]
                
                # Sleep for 1 minute before next cleanup
                await asyncio.sleep(60)
                
            except asyncio.CancelledError:
                break
            except Exception:
                # Continue cleanup on errors
                await asyncio.sleep(60)
